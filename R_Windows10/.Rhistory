summary(lm(sex~cashcrop, data=data))
install.packages("lfe")
library(lfe)
library(dummies)
single <- lm(lwage ~ yrs_school, data = nlsw88)
data <- read.csv("nlsw88.csv")
single <- lm(lwage ~ yrs_school, data = nlsw88)
nlsw88 <- read.csv("nlsw88.csv")
single <- lm(lwage ~ yrs_school, data = nlsw88)
View(nlsw88)
View(single)
summary(single)
coefficients(single) # model coefficients
ci <- confint(single, level=0.9) ci
install.packages("confint")
install.packages("confint")
install.packages(c("np", "perm"))
#Q1
perms <- chooseMatrix(8,4)
nlsw88 <- read.csv("paxson.corrected.csv")
data <- read.csv("paxson_corrected.csv")
View(data)
clear
swirl()
swirl
library(swirl)
swirl()
x[1:10]
# Recall that `!` gives us the negation of a logical expression, so !is.na(x) can be read as 'is not NA'.
# Therefore, if we want to create a vector
# called y that contains all of the non-NA values from x, we can use y <- x[!is.na(x)]. Give it a try.
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x![is.na(x) & x > 0]
x[!is.na(x) & x > 0]
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
c(x(3,5,7))
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
c(3,5,7)
info()
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
c(3,5,7)
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
[]<- c(3,5,7)
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
k<- c(3,5,7)
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
c(3,5,7)
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
c(3,5,7)
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
c(3,5,7)
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
c(3,5,7)
# Subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to specify the element numbers as a numeric vector
x[c(3,5,7)]
# It's important that when using integer vectors to subset our vector x, we stick with the set of indexes {1, 2, ..., 40} since x only has 40 elements.
# What happens if we ask for the zeroth element of x (i.e. x[0])? Give it a try.
x[0]
x[3000]
# What if we're interested in all elements of x EXCEPT the 2nd and 10th?
# It would be pretty tedious to construct a vector containing all numbers 1 through 40 EXCEPT 2 and 10.
# Luckily, R accepts negative integer indexes.
# Whereas x[c(2, 10)] gives us ONLY the 2nd and 10th elements of x, x[c(-2, -10)] gives us all elements of x EXCEPT for the 2nd and 10 elements
x[c(-2,-10)]
# OR
x[-c(2,10)]
# Create a numeric vector with three named elements using:
vect <- c(foo = 11, bar = 2, norf = NA)
vect
# We can also get the names of vect by passing vect as an argument to the names() function
names(vect)
# Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do that now.
vect2 <- c(11,2,NA)
# Then, we can add the `names` attribute to vect2 after the fact with names(vect2) <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
# Now, let's check that vect and vect2 are the same by passing them as arguments to the identical() function.
identical(vect, vect2)
# Which of the following commands do you think would give us the second element of vect?
vect["bar"]
# Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it out.
vect[c("foo", "bar")]
0
quit
info()
main()
# Create a vector containing the numbers 1 through 20 using the `:` operator. Store the result in a variable called my_vector
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
# Create a matrix containing the same numbers (1-20) and dimensions (4 rows, 5 columns) by calling the matrix() function
# Store the result in a variable called my_matrix2
my_matrix2 <- matrix(my_vector, nrow = 4, ncol = 5, byrow=TRUE)
View(my_matrix2)
# Create a matrix containing the same numbers (1-20) and dimensions (4 rows, 5 columns) by calling the matrix() function
# Store the result in a variable called my_matrix2
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow=TRUE)
# Create a matrix containing the same numbers (1-20) and dimensions (4 rows, 5 columns) by calling the matrix() function
# Store the result in a variable called my_matrix2
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
# Imagine that the numbers in our table represent some measurements from a clinical experiment,
# where each row represents one patient and each column represents one variable for which measurements were taken
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
# How to include the names of our patients in the table without destroying the integrity of our numeric data
# Try the following:
my_data <- data.frame(patients, my_matrix)
View(my_data)
View(my_vector)
View(my_matrix)
View(my_matrix2)
View(my_data)
View(my_data)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
ls(plants)
ls()
class(plants)
# Since the dataset is stored in a data frame, we know it is rectangular
# In other words, it has two dimensions (rows and columns) and fits neatly into a table or spreadsheet
# Use this to find out:
dim(plants)
# The first number you see (5166) is the number of rows (observations) and the second number (10) is the number of columns (variables)
nrow(plants)
# View the number of columns(variables)
ncol(plants)
# If you are curious as to how much space the dataset is occupying in memory, you can use:
object.size(plants)
# We have shape and size, get a feel for what is inside
names(plants)
# Take a look inside
head(plants)
# Take a look inside
head(plants, 10)
tail(plants, 15)
# After previewing the top and bottom of the data, you probably noticed lots of NAs, which are R's placeholders for missing values
# Use this to get a better feel for how each variable is distributed and how much of the dataset is missing:
summary(plants)
# summary() provides different output for each variable, depending on its class
# For numeric data such as Precip_Min, summary() displays the minimum, 1st quartile, median, mean, 3rd quartile, and maximum
# These values help us understand how the data are distributed
# For categorical variables (called 'factor' variables in R), summary() displays the number of times each value (or 'level') occurs
# For example, each value of Scientific_Name only appears once, since it is unique to a specific plant
# In contrast, the summary for Duration (also a factor variable) tells us that our dataset contains:
# 3031 Perennial plants, 682 Annual plants, etc
# R truncated the summary for Active_Growth_Period by including a catch-all category called 'Other'
# Since it is a categorical/factor variable, we can see how many times each value actually occurs in the data with:
table(plants$Active_Growth_Period)
str(plants)
data(cars)
?cars
# Run head() function to run the top results
head(cars)
# Okay, run plot
plot(cars)
?plot
plot(cars)
# For the next set of questions, include the argument names in your answers
# That is, do not type plot(cars$speed, cars$dist), although that will work.
# Instead, use:
plot(x = cars$speed, y = cars$dist)
# However, we will wait till later in the lesson before using the formula interface
# Use plot() command to show dist on the x-axis and speed on the y-axis from the cars data frame
# This is the opposite of what we did above
plot(x = cars$dist, y = cars$speed)
plot(x = SPEED, cars)
plot(x = cars$speed, y = cars$dist)
plot(cars, x="Speed")
plot(cars, xlabel="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
# Assign Speed as the xLabel
plot(x = cars$speed, y = cars$dist, xlab = "Speed", y = "Stopping Distance")
# Assign Speed as the xLabel
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
# Assign Speed as the xLabel
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
# Assign Speed as the xLabel
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
d
d
aFF
plot(cars, sub = "My Plot Subtitle")
plot(col = 2)
plot(cars, col = 2)
xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
# Plot cars using triangles. (Use pch = 2 to achieve this effect.)
plot(cars, pch = 2)
# Reel er in
data("mtcars")
# Reel er in
data(mtcars)
play()
dim(mtcars)
view(mtcars)
View(mtcars)
summary(mtcars)
class(mtcars)
dim(mtcars)
nrow
nrow(mtcars)
ncool(mtcars)
ncol(mtcars)
object.size(mtcars)
names(mtcars)
head(mtcars)
tails(mtcars)
tail(mtcars)
table(mtcars$mpg)
table(mtcars$gear)
str(mtcars)
?mtcars
pairs(mtcars, main = "mtcars data", gap = 1/4)
pairs(mtcars, main = "mtcars data", gap = 1/8)
pairs(mtcars, main = "mtcars data", gap = 1/4)
pairs(mtcars, main = "mtcars data", gap = 1/8)
pairs(mtcars, main = "mtcars data", gap = 1/4)
pairs(mtcars, main = "mtcars data", gap = 1/8)
pairs(mtcars, main = "mtcars data", gap = 1/4)
pairs(mtcars, main = "mtcars data", gap = 1/2)
pairs(mtcars, main = "mtcars data", gap = 1)
pairs(mtcars, main = "mtcars data", gap = 0)
pairs(mtcars, main = "mtcars data", gap = 1/8)
pairs(mtcars, main = "mtcars data", gap = 1/6)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 2)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ disp | as.factor(vs), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ disp | as.factor(gear), data = mtcars,
panel = panel.smooth, rows = 1)
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
View(mtcars2)
summary(mtcars2)
nxt()
?boxplot()
?boxplot
# boxplot(), like many R functions, also takes a "formula" argument, generally an expression with a tilde ("~") which indicates the relationship between the input variables
# This allows you to enter something like mpg ~ cyl to plot the relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on the y-axis
# Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box plot
boxplot(formula = mpg ~ cyl, data = mtcars)
# When looking at a single variable, histograms are a useful tool
# hist() is the associated R function
# Like plot(), hist() is best used by just passing in a single vector
hist(mtcars$mpg)
library(gapminder)
install.packages("gapminder")
library(gapminder)
library(dplyr)
library(dplyr)
gapminder
# the filter verb
# pipe it up, take it and feed it
gapminder %>%
filter( year == 2007)
gapminder %>%
filter( country == "United States")
gapminder %>%
filter( year == 2007, country == "United States")
# the arrange verb
# sorts a table based on a variable, like min & max
gapminder %>%
arrange(gpPercap)
# the arrange verb
# sorts a table based on a variable, like min & max
gapminder %>%
arrange(gdpPercap)
arrange(desc(gdpPercap)
gapminder %>%
arrange(desc(gdpPercap))
gapminder %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(year == 2007) %>%
arrange(gdpPercap)
gapminder %>%
filter(year == 2007) %>%
arrange(gdpPercap)
gapminder %>%
filter(year == 2007) %>%
arrange(gdpPercap)
gapminder %>%
filter(year == 2007) %>%
arrange(desc(gdpPercap))
# the mutate verb
# changes or adds variables
gapminder %>%
mutate(pop = pop / 1000000)
gapminder %>%
mutate(gdp = gdpPercap * pop)
# combining verbs
gapminder %>%
mutate(gdp = gdpPercap * pop) %>%
filter(year == 2007) %>%
arrange(desc(gdp))
install.packages("coronavirus")
library(coronavirus)
devtools::install_github(covid19r/coronavirus)
install.packages("devtools")
library(devtools)
devtools::install_github(covid19r/coronavirus)
install.packages("lapply")
library(lapply)
install.packages(c("backports", "broom", "callr", "car", "cli", "digest", "dplyr", "forcats", "fs", "ggplot2", "glue", "lifecycle", "modelr", "nloptr", "plyr", "ps", "quantreg", "Rcpp", "rJava", "rlang", "sp", "stringi", "testthat", "tibble", "tinytex", "vctrs", "xlsx", "xml2"))
install.packages(c("backports", "broom", "callr", "car", "cli", "digest", "dplyr", "forcats", "fs", "ggplot2", "glue", "lifecycle", "modelr", "nloptr", "plyr", "ps", "quantreg", "Rcpp", "rJava", "rlang", "sp", "stringi", "testthat", "tibble", "tinytex", "vctrs", "xlsx", "xml2"))
install.packages(c("backports", "broom", "callr", "car", "cli", "digest", "dplyr", "forcats", "fs", "ggplot2", "glue", "lifecycle", "modelr", "nloptr", "plyr", "ps", "quantreg", "Rcpp", "rJava", "rlang", "sp", "stringi", "testthat", "tibble", "tinytex", "vctrs", "xlsx", "xml2"))
install.packages(c("backports", "broom", "callr", "car", "cli", "digest", "dplyr", "forcats", "fs", "ggplot2", "glue", "lifecycle", "modelr", "nloptr", "plyr", "ps", "quantreg", "Rcpp", "rJava", "rlang", "sp", "stringi", "testthat", "tibble", "tinytex", "vctrs", "xlsx", "xml2"))
install.packages(c("backports", "broom", "callr", "car", "cli", "digest", "dplyr", "forcats", "fs", "ggplot2", "glue", "lifecycle", "modelr", "nloptr", "plyr", "ps", "quantreg", "Rcpp", "rJava", "rlang", "sp", "stringi", "testthat", "tibble", "tinytex", "vctrs", "xlsx", "xml2"))
devtools::install_github(covid19r/coronavirus)
install.packages("devtools")
install.packages("devtools")
install.packages("coronavirus")
library(coronavirus)
library(coronavirus)
library(coronavirus)
devtools::install_github(covid19r/coronavirus)
install.packages("coronavirus")
install.packages("coronavirus")
library(coronavirus)
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
devtools::install_github(covid19r/coronavirus)
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(usethis)
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
library(devtools)
devtools::install_github(covid19r/coronavirus)
install.packages("lapply")
install.packages("lapply")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(usethis)
install.packages("lapply")
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(usethis)
devtools::install_github(covid19r/coronavirus)
devtools::install_github(covid19/coronavirus)
devtools::install_github("covid19r/coronavirus")
library(coronavirus)
data("coronavirus")
force(coronavirus)
View(coronavirus)
View(coronavirus)
library(dplyr)
library(dplyr)
summary_df <- coronavirus %>% group_by(Country.Region, type) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
View(summary_df)
summary_df %>% head(20)
library(tidyr)
coronavirus %>%
filter(date == max(date)) %>%
select(country = Country.Region, type, cases) %>%
group_by(country, type) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = total_cases) %>%
arrange(-confirmed)
devtools::install_github("covid19r/coronavirus")
file.edit(file.path("~", ".Rprofile"))
devtools::install_github("covid19r/coronavirus")
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(usethis)
library(devtools)
devtools::install_github("covid19r/coronavirus")
file.edit(file.path("~", ".Rprofile"))
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(usethis)
library(devtools)
install.packages("ps")
library(ps)
devtools::install_github("covid19r/coronavirus")
file.edit(file.path("~", ".Rprofile"))
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(usethis)
library(devtools)
devtools::install_github("covid19r/coronavirus")
file.edit(file.path("~", ".Rprofile"))
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(usethis)
install.packages("Rcpp")
library(Rcpp)
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(usethis)
library(devtools)
devtools::install_github("covid19r/coronavirus")
file.edit(file.path("~", ".Rprofile"))
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(usethis)
library(devtools)
library(coronavirus)
devtools::install_github("covid19r/coronavirus")
file.edit(file.path("~", ".Rprofile"))
install.packages("coronavirus")
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(usethis)
install.packages("fs")
library(fs)
install.packages("fs")
file.edit(file.path("~", ".Rprofile"))
install.packages("coronavirus")
install.packages("coronavirus")
library(coronavirus)
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(usethis)
install.packages("fs")
library(fs)
install.packages("usethis")
library(usethis)
install.packages("devtools")
library(devtools)
library(coronavirus)
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
file_delete(fs)
file_delete("fs")
file_delete("C:/Users/sarad/Documents/R/win-library/3.6/fs")
library(devtools)
library(usethis)
library(coronavirus)
library(data.table)
detach("package:data.table", unload = TRUE)
